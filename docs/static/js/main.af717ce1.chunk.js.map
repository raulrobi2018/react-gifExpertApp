{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"4MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAe5C,OAGI,aAFA,CAEA,QAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OAC5CN,EAAc,KAMd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,8BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,0DAG4CC,UAC3DH,GAJe,sDAMAI,MAAMF,GANN,cAMbG,EANa,gBAQEA,EAAKC,OARP,uBAQZC,EARY,EAQZA,KAEDC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAEXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAfvB,kBAmBZM,GAnBY,4CAAH,sDCYLO,G,MATY,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAChC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,SCqBDO,EAzBQ,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECGX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAqBtC,OAVAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAACC,GACpBH,EAAS,CACLf,KAAMkB,EAENL,SAAS,SAGlB,CAACpB,IAEGqB,EDvByBK,CAAa1B,GAAhCa,EADsB,EAC5BN,KAAca,EADc,EACdA,QAErB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GACG,mBAAGJ,UAAU,mCAAb,yBAGJ,qBAAKA,UAAU,WAAf,SACKH,EAAOJ,KAAI,SAACC,GAGT,OAAO,wBAAC,EAAD,2BAAiBA,GAAjB,IAAsBiB,IAAKjB,EAAIC,eE0B3CiB,EAvCM,WAAO,IAAD,EACa1C,mBAAS,CAAC,cADvB,mBAChB2C,EADgB,KACJ5C,EADI,KAgBvB,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBACA,6BAOQ4C,EAAWpB,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAASA,SAAUA,GAAeA,YC9B1D8B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.af717ce1.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2)\r\n            setCategories((cats) => [inputValue, ...cats]);\r\n        setInputValue(\"\");\r\n    };\r\n\r\n    return (\r\n        // Cuando utilizamos un elemento form, no es necesario utilizar un\r\n        // Fragment porque el form agrupa todos los elementos\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\n//Establece setCategories como requiered\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n","export const getGifs = async (category) => {\r\n    // encodeURI es una función javascript que transforma cualquier caracter no permitido en una url a\r\n    //código valido, como por ejemplo reemplazar los espacios por %20\r\n    const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(\r\n        category\r\n    )}&api_key=3Ysdk9Dh04shPsSSyQtka6WqJ57UNWzO`;\r\n    const resp = await fetch(url);\r\n\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            // Ponemos el operador '?' para asegurarnos de que el atributo exista\r\n            url: img.images?.downsized_medium.url\r\n        };\r\n    });\r\n\r\n    return gifs;\r\n};\r\n","import React from \"react\";\r\nimport \"animate.css\";\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GifGridItem;\r\n","import {useFetchGifs} from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({category}) => {\r\n    const {data: images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n            {loading && (\r\n                <p className=\"animate__animated animate__flash\">Cargando...</p>\r\n            )}\r\n\r\n            <div className=\"cardGrid\">\r\n                {images.map((img) => {\r\n                    // Al enviar '...img' estoy enviando cada una de las propiedades de la imagen\r\n                    // de manera independiente\r\n                    return <GifGridItem {...img} key={img.id} />;\r\n\r\n                    // Otra forma\r\n                    // return <GifGridItem img={img} key={img.id} />;\r\n                })}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifGrid;\r\n","import {useEffect, useState} from \"react\";\r\nimport {getGifs} from \"../helpers/getGifs\";\r\n\r\n/* Los custom hooks funcionan como si fueran functional components. Pueden utilizar muchas características\r\nde react y son simplemente funciones */\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // Utilizamos el useEffect para que el componente se reenderize\r\n    // una sola vez\r\n    // El segundo argumento es utilizado para decirle a React que si el\r\n    //category cambia, entonces reenderize. En este caso no cambia pero\r\n    //quitamos el warning del navegador que tira por este tema\r\n    useEffect(() => {\r\n        getGifs(category).then((imgs) => {\r\n            setstate({\r\n                data: imgs,\r\n                // Va en false porque aquí ya retornó las imagenes\r\n                loading: false\r\n            });\r\n        });\r\n    }, [category]);\r\n\r\n    return state; //retorna data = [] y loading = true\r\n};\r\n","import React, {useState} from \"react\";\r\nimport {AddCategory} from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\n// Utilizando el comando rafc crea el componente con su contenido inicializado\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n    // const handleAdd = () => {\r\n    //     // Si hacemos esto está mal. Aquí lo que hace es pasar por arriba el state de categories\r\n    //     // y lo convierte en un string\r\n    //     // setCategories(\"Raul\");\r\n\r\n    //     // Extrae las categorías con el operador spread dentro del array y le agrega uno nuevo\r\n    //     //Si se quiere agregar en primer lugar: ['Raul', ...categories]\r\n    //     setCategories([...categories, \"Raul\"]);\r\n\r\n    //     // Otra forma es retornar un callback\r\n    //     // setCategories((cats) => [...cats, \"Raul\"]);\r\n    // };\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            {/* Envía la función setCategories como props */}\r\n            <AddCategory setCategories={setCategories} />\r\n\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    // Siempre se necesita tener el key de cada elemento\r\n                    // Por lo general el atributo \"key\" lleva un id de base de datos o un index\r\n                    // El key es usado por React para tener una referencia del elemento cuando por ejemplo\r\n                    // algo cambia en ese elemento y no tenga que renderizar todo\r\n                    // En este caso, le ponemos category porque en el array no se repiten\r\n                    categories.map((category) => (\r\n                        <GifGrid category={category} key={category} />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport GifExpertApp from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}